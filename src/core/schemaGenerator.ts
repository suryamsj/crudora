import { Model } from './model';

export class SchemaGenerator {
  static generatePrismaSchema(models: (typeof Model)[], databaseProvider: string = 'sqlite'): string {
    let schema = `// Auto-generated Prisma schema\n// Generated by Crudora Framework\n\n`;

    schema += `generator client {\n  provider = "prisma-client-js"\n}\n\n`;

    // Fix: Use the provided database provider directly
    if (databaseProvider === 'sqlite') {
      schema += `datasource db {\n  provider = "sqlite"\n  url = env("DATABASE_URL")\n}\n\n`;
    } else {
      schema += `datasource db {\n  provider = "${databaseProvider}"\n  url = env("DATABASE_URL")\n}\n\n`;
    }

    for (const model of models) {
      schema += this.generateModelSchemaFromClass(model);
    }

    return schema;
  }

  private static generateModelSchemaFromClass(modelClass: typeof Model): string {
    const tableName = modelClass.getTableName();
    const primaryKey = modelClass.getPrimaryKey();

    let schema = `model ${modelClass.name} {\n`;

    // Add primary key
    schema += `  ${primaryKey} String @id @default(uuid())\n`;

    // Add common fields (you can customize this based on your needs)
    schema += `  createdAt DateTime @default(now())\n`;
    schema += `  updatedAt DateTime @updatedAt\n`;

    // Add custom fields if defined in static properties
    if (modelClass.fillable) {
      for (const field of modelClass.fillable) {
        if (field !== primaryKey) {
          schema += `  ${field} String?\n`;
        }
      }
    }

    schema += `\n  @@map("${tableName}")\n`;
    schema += `}\n\n`;

    return schema;
  }
}
